{
  "swagger": "2.0",
  "info": {
    "title": "Merest API",
    "version": "1.0"
  },
  "host": "localhost",
  "basePath": "/api/v1",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "meta",
      "description": "API description"
    },
    {
      "name": "Person",
      "description": "Methods to manage Person"
    },
    {
      "name": "Book",
      "description": "Methods to manage Book"
    }
  ],
  "responses": {
    "405": {
      "description": "The end-point is not supported",
      "schema": {
        "$ref": "#/definitions/modelAPIError_E4xx"
      }
    },
    "422": {
      "description": "Entity validation failed",
      "schema": {
        "$ref": "#/definitions/modelAPIError_E422"
      }
    },
    "500": {
      "description": "Internal API error",
      "schema": {
        "$ref": "#/definitions/modelAPIError_E500"
      }
    }
  },
  "paths": {
    "/": {
      "options": {
        "tags": [
          "meta"
        ],
        "operationId": "allAPIOptions ",
        "description": "List all end-points of current application",
        "summary": "List all api options",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Options"
            },
            "examples": {
              "application/json": [
                [
                  "options",
                  "/api/v1/",
                  "List all end-points of current application"
                ],
                [
                  "options",
                  "/api/v1/people/",
                  "List API-options for people"
                ],
                [
                  "get",
                  "/api/v1/people/",
                  "List/Search all people"
                ],
                [
                  "post",
                  "/api/v1/people/",
                  "Create a new Person"
                ],
                [
                  "get",
                  "/api/v1/people/:id",
                  "Find a Person by Id"
                ],
                [
                  "post",
                  "/api/v1/people/:id",
                  "Find a Person by Id and update it (particulary)"
                ],
                [
                  "delete",
                  "/api/v1/people/:id",
                  "Find a Person by Id and delete it."
                ],
                [
                  "options",
                  "/api/v1/books/",
                  "List API-options for books"
                ],
                [
                  "get",
                  "/api/v1/books/",
                  "List/Search all books"
                ],
                [
                  "post",
                  "/api/v1/books/",
                  "Create a new Book"
                ],
                [
                  "get",
                  "/api/v1/books/:id",
                  "Find a Book by Id"
                ],
                [
                  "post",
                  "/api/v1/books/:id",
                  "Find a Book by Id and update it (particulary)"
                ],
                [
                  "delete",
                  "/api/v1/books/:id",
                  "Find a Book by Id and delete it."
                ]
              ]
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/people/": {
      "options": {
        "tags": [
          "Person",
          "meta"
        ],
        "operationId": "optionsFor_people",
        "summary": "API Options",
        "description": "List API-options for people",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Options"
            },
            "examples": {
              "application/json": [
                [
                  "options",
                  "/api/v1/people/",
                  "List API-options for people"
                ],
                [
                  "get",
                  "/api/v1/people/",
                  "List/Search all people"
                ],
                [
                  "post",
                  "/api/v1/people/",
                  "Create a new Person"
                ],
                [
                  "get",
                  "/api/v1/people/:id",
                  "Find a Person by Id"
                ],
                [
                  "post",
                  "/api/v1/people/:id",
                  "Find a Person by Id and update it (particulary)"
                ],
                [
                  "delete",
                  "/api/v1/people/:id",
                  "Find a Person by Id and delete it."
                ]
              ]
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Person"
        ],
        "operationId": "searchFor_people",
        "summary": "Search for people",
        "description": "List/Search all people",
        "parameters": [
          {
            "name": "_sort",
            "in": "query",
            "type": "string",
            "description": "The list of fields to order by: [-]field[,[-]field]"
          },
          {
            "name": "_limit",
            "in": "query",
            "type": "integer",
            "description": "The maximum number of documents in the response"
          },
          {
            "name": "_skip",
            "in": "query",
            "type": "integer",
            "description": "Number of documents should be skipped in the selection before responding"
          },
          {
            "name": "firstName",
            "in": "query",
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "type": "string"
          },
          {
            "name": "isPoet",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "_id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "__v",
            "in": "query",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully searched",
            "schema": {
              "title": "List of people",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person_Response"
              }
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Person"
        ],
        "operationId": "create_Person",
        "summary": "Create Person",
        "description": "Create a new Person",
        "parameters": [
          {
            "name": "Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Person"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created",
            "schema": {
              "$ref": "#/definitions/Person_Response"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "description": "Wrong method usage (use `post ~/:id` to update an object)",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "422": {
            "$ref": "#/responses/422"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "tags": [
          "Person"
        ],
        "operationId": "detailsOf_Person",
        "summary": "Details of Person",
        "description": "Find a Person by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "pattern": "[a-f\\d]{24}",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Person was found successfully.",
            "schema": {
              "$ref": "#/definitions/Person_Response"
            }
          },
          "404": {
            "description": "Person is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Person"
        ],
        "operationId": "update_Person",
        "summary": "Update Person",
        "description": "Find a Person by Id and update it (particulary)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/update_Person_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated",
            "schema": {
              "$ref": "#/definitions/Person_Response"
            }
          },
          "404": {
            "description": "Person is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "422": {
            "$ref": "#/responses/422"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Person"
        ],
        "operationId": "delete_Person",
        "summary": "Delete Person",
        "description": "Find a Person by Id and delete it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "$ref": "#/definitions/deleteResponse"
            }
          },
          "404": {
            "description": "Person is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/books/": {
      "options": {
        "tags": [
          "Book",
          "meta"
        ],
        "operationId": "optionsFor_books",
        "summary": "API Options",
        "description": "List API-options for books",
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Options"
            },
            "examples": {
              "application/json": [
                [
                  "options",
                  "/api/v1/books/",
                  "List API-options for books"
                ],
                [
                  "get",
                  "/api/v1/books/",
                  "List/Search all books"
                ],
                [
                  "post",
                  "/api/v1/books/",
                  "Create a new Book"
                ],
                [
                  "get",
                  "/api/v1/books/:id",
                  "Find a Book by Id"
                ],
                [
                  "post",
                  "/api/v1/books/:id",
                  "Find a Book by Id and update it (particulary)"
                ],
                [
                  "delete",
                  "/api/v1/books/:id",
                  "Find a Book by Id and delete it."
                ]
              ]
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "Book"
        ],
        "operationId": "searchFor_books",
        "summary": "Search for books",
        "description": "List/Search all books",
        "parameters": [
          {
            "name": "_sort",
            "in": "query",
            "type": "string",
            "description": "The list of fields to order by: [-]field[,[-]field]"
          },
          {
            "name": "_limit",
            "in": "query",
            "type": "integer",
            "description": "The maximum number of documents in the response"
          },
          {
            "name": "_skip",
            "in": "query",
            "type": "integer",
            "description": "Number of documents should be skipped in the selection before responding"
          },
          {
            "name": "title",
            "in": "query",
            "type": "string"
          },
          {
            "name": "year",
            "in": "query",
            "type": "number"
          },
          {
            "name": "author",
            "in": "query",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "type": "string"
          },
          {
            "name": "_id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "__v",
            "in": "query",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully searched",
            "schema": {
              "title": "List of books",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Book_Response"
              }
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Book"
        ],
        "operationId": "create_Book",
        "summary": "Create Book",
        "description": "Create a new Book",
        "parameters": [
          {
            "name": "Book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Book"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created",
            "schema": {
              "$ref": "#/definitions/Book_Response"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "description": "Wrong method usage (use `post ~/:id` to update an object)",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "422": {
            "$ref": "#/responses/422"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/books/{id}": {
      "get": {
        "tags": [
          "Book"
        ],
        "operationId": "detailsOf_Book",
        "summary": "Details of Book",
        "description": "Find a Book by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "pattern": "[a-f\\d]{24}",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The Book was found successfully.",
            "schema": {
              "$ref": "#/definitions/Book_Response"
            }
          },
          "404": {
            "description": "Book is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Book"
        ],
        "operationId": "update_Book",
        "summary": "Update Book",
        "description": "Find a Book by Id and update it (particulary)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "Book",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/update_Book_Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated",
            "schema": {
              "$ref": "#/definitions/Book_Response"
            }
          },
          "404": {
            "description": "Book is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "422": {
            "$ref": "#/responses/422"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Book"
        ],
        "operationId": "delete_Book",
        "summary": "Delete Book",
        "description": "Find a Book by Id and delete it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "$ref": "#/definitions/deleteResponse"
            }
          },
          "404": {
            "description": "Book is not found by specified id",
            "schema": {
              "$ref": "#/definitions/modelAPIError_E4xx"
            }
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "modelAPIError_E4xx": {
      "title": "ModelAPIError",
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "modelAPIError_E422": {
      "title": "EntityValidationError",
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "errors": {}
      }
    },
    "modelAPIError_E500": {
      "title": "InternalError",
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "stack": {}
      }
    },
    "Options": {
      "title": "List of options",
      "type": "array",
      "items": {
        "title": "Option parameters",
        "type": "array",
        "items": {
          "type": "string"
        },
        "minItems": 3,
        "maxItems": 3
      }
    },
    "deleteResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {}
    },
    "Person_Response": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isPoet": {
          "type": "boolean",
          "default": false
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "__v": {
          "type": "number"
        }
      }
    },
    "Person": {
      "title": "Person",
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isPoet": {
          "type": "boolean",
          "default": false
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "__v": {
          "type": "number"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "email"
      ]
    },
    "update_Person_Request": {
      "title": "Person",
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isPoet": {
          "type": "boolean",
          "default": false
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        }
      }
    },
    "Book_Response": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "year": {
          "type": "number"
        },
        "author": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ref": "Person",
            "description": "Refers to Person",
            "format": "uuid",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "minItems": 1
        },
        "description": {
          "type": "string"
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "__v": {
          "type": "number"
        }
      }
    },
    "Book": {
      "title": "Book",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "year": {
          "type": "number"
        },
        "author": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ref": "Person",
            "description": "Refers to Person",
            "format": "uuid",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "minItems": 1
        },
        "description": {
          "type": "string"
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        },
        "__v": {
          "type": "number"
        }
      },
      "required": [
        "title",
        "year"
      ]
    },
    "update_Book_Request": {
      "title": "Book",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "year": {
          "type": "number"
        },
        "author": {
          "type": "array",
          "items": {
            "type": "string",
            "x-ref": "Person",
            "description": "Refers to Person",
            "format": "uuid",
            "pattern": "^[0-9a-fA-F]{24}$"
          },
          "minItems": 1
        },
        "description": {
          "type": "string"
        },
        "_id": {
          "type": "string",
          "format": "uuid",
          "pattern": "^[0-9a-fA-F]{24}$"
        }
      }
    }
  }
}